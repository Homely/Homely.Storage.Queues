name: $(Year:yyyy).$(Month).$(DayOfMonth).$(Rev:r)
pool:
  vmImage: 'Ubuntu 16.04'

variables:
  buildConfiguration: 'Release'
  solutionFile: 'Homely.Storage.Queues.sln'

trigger:
  branches:
    include:
    - master
    - refs/tags/*
pr:
  autoCancel: true
  branches:
    include:
    - master

steps:

- powershell: |
    $buildVersion = $env:BUILD_BUILDNUMBER
    Write-Host "##vso[task.setvariable variable=assemblyVersion]$buildVersion"
    Write-Host "Assembly version is" $buildVersion
  displayName: 'Set the assembly version number.'
    
- powershell: |
    $tagVersion = $env:BUILD_SOURCEBRANCH.remove(0, 10)
    Write-Host "##vso[task.setvariable variable=assemblyVersion]$tagVersion"
    Write-Host "*** TAG OVERWRITE :: Assembly version is" $tagVersion
  displayName: 'Update assembly version to be the Tag value.'
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))

- task: DotNetCoreCLI@2
  displayName: 'Restore nuget packages'
  inputs:
    command: restore
    projects: '$(solutionFile)'

- task: DotNetCoreCLI@2
  displayName: 'Build solution - $(solutionFile)'
  inputs:
    command: build
    projects: '$(solutionFile)'
    arguments: '--configuration $(buildConfiguration) --no-restore -p:Version=$(assemblyVersion) -p:langversion=latest'

- script: dotnet test -c $(buildConfiguration) -v minimal --no-build --logger trx --collect:"XPlat Code Coverage" --results-directory './CodeCoverageResults'
  displayName: 'dotnet test'
  
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: 'Invoke-WebRequest -Uri "https://codecov.io/bash" -OutFile codecov.sh'
    pwsh: true
  displayName: 'codecov: download script'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: 'bash codecov.sh -s $(Agent.BuildDirectory) -f "*coverage.cobertura.xml" -Z -t $($env:CODECOV_TOKEN)'
    pwsh: true
  displayName: 'codecov: upload'
    
- script: dotnet pack --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) -p:Version=$(assemblyVersion) -v normal --no-build
  displayName: 'dotnet pack [i.e. create nuget package]'
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))

- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts'
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
